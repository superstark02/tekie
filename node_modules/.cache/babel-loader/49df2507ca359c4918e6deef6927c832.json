{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\super\\\\.vscode\\\\tekie\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\super\\\\.vscode\\\\tekie\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\super\\\\.vscode\\\\tekie\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\super\\\\.vscode\\\\tekie\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\super\\\\.vscode\\\\tekie\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\super\\\\.vscode\\\\tekie\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar _excluded = [\"headers\"];\nimport { print } from \"graphql/language/printer\";\nimport extractFiles from \"./extract-files\";\n\nvar GqlClient = /*#__PURE__*/function () {\n  function GqlClient(_ref) {\n    var url = _ref.url,\n        errorHandler = _ref.errorHandler;\n\n    _classCallCheck(this, GqlClient);\n\n    this.url = url;\n    this.errorHandler = errorHandler;\n  }\n\n  _createClass(GqlClient, [{\n    key: \"query\",\n    value: function () {\n      var _query2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_query, variables) {\n        var options,\n            headers,\n            others,\n            files,\n            fetchOptions,\n            graphqlQuery,\n            body,\n            response,\n            result,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                headers = options.headers, others = _objectWithoutProperties(options, _excluded); // Extracts all files from variables and replaces them\n                // with null\n\n                files = extractFiles(variables);\n                // uncomment below to debug query\n                // Creates a stringfied query\n                graphqlQuery = JSON.stringify({\n                  query: print(_query),\n                  // \"print\" changes graphql AST into normal string\n                  variables: variables\n                }); // Uncomment to the debugðŸ‘‡\n                // (headers, JSON.stringify(variables, null, 2))\n                // console.log(\n                //   print(query),\n                //   JSON.stringify(variables)\n                // )\n                // Checks if there are any files in the query\n                // if there is then ...\n\n                if (files.length) {\n                  // ...then creates a form object\n                  body = new FormData(); // appends query into body\n\n                  body.append(\"operations\", graphqlQuery); // apppend files into body\n\n                  files.forEach(function (_ref2) {\n                    var path = _ref2.path,\n                        file = _ref2.file;\n                    return body.append(path, file);\n                  }); // sets fetchOptions\n\n                  fetchOptions = _objectSpread({\n                    method: \"POST\",\n                    body: body\n                  }, options);\n                } else {\n                  // sets fetchOption without any body append\n                  // because there are no files here and we\n                  // directly assign body to graphqlQuery\n                  fetchOptions = _objectSpread({\n                    method: \"POST\",\n                    headers: _objectSpread({\n                      \"Content-Type\": \"application/json\"\n                    }, headers),\n                    body: graphqlQuery\n                  }, others);\n                }\n\n                _context.prev = 5;\n                _context.next = 8;\n                return fetch(this.url, fetchOptions);\n\n              case 8:\n                response = _context.sent;\n                _context.next = 11;\n                return response.json();\n\n              case 11:\n                result = _context.sent;\n\n                if (!result.errors) {\n                  _context.next = 14;\n                  break;\n                }\n\n                throw result;\n\n              case 14:\n                return _context.abrupt(\"return\", result);\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](5);\n                throw Object(_objectSpread({\n                  status: this.errorHandler(_context.t0)\n                }, _context.t0));\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 17]]);\n      }));\n\n      function query(_x, _x2) {\n        return _query2.apply(this, arguments);\n      }\n\n      return query;\n    }()\n  }]);\n\n  return GqlClient;\n}();\n\nexport { GqlClient as default };","map":{"version":3,"sources":["C:/Users/super/.vscode/tekie/src/utils/GqlClient.js"],"names":["print","extractFiles","GqlClient","url","errorHandler","query","variables","options","headers","others","files","graphqlQuery","JSON","stringify","length","body","FormData","append","forEach","path","file","fetchOptions","method","fetch","response","json","result","errors","Object","status"],"mappings":";;;;;;;AAAA,SAASA,KAAT,QAAsB,0BAAtB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;IAEqBC,S;AACnB,2BAAmC;AAAA,QAArBC,GAAqB,QAArBA,GAAqB;AAAA,QAAhBC,YAAgB,QAAhBA,YAAgB;;AAAA;;AACjC,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;;;;6EAED,iBAAYC,MAAZ,EAAmBC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8BC,gBAAAA,OAA9B,2DAAwC,EAAxC;AACUC,gBAAAA,OADV,GACiCD,OADjC,CACUC,OADV,EACsBC,MADtB,4BACiCF,OADjC,cAEE;AACA;;AACMG,gBAAAA,KAJR,GAIgBT,YAAY,CAACK,SAAD,CAJ5B;AAOE;AAEA;AACMK,gBAAAA,YAVR,GAUuBC,IAAI,CAACC,SAAL,CAAe;AAClCR,kBAAAA,KAAK,EAAEL,KAAK,CAACK,MAAD,CADsB;AACb;AACrBC,kBAAAA,SAAS,EAATA;AAFkC,iBAAf,CAVvB,EAeE;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,oBAAII,KAAK,CAACI,MAAV,EAAkB;AAChB;AACMC,kBAAAA,IAFU,GAEH,IAAIC,QAAJ,EAFG,EAGhB;;AACAD,kBAAAA,IAAI,CAACE,MAAL,CAAY,YAAZ,EAA0BN,YAA1B,EAJgB,CAKhB;;AACAD,kBAAAA,KAAK,CAACQ,OAAN,CAAc;AAAA,wBAAGC,IAAH,SAAGA,IAAH;AAAA,wBAASC,IAAT,SAASA,IAAT;AAAA,2BAAoBL,IAAI,CAACE,MAAL,CAAYE,IAAZ,EAAkBC,IAAlB,CAApB;AAAA,mBAAd,EANgB,CAOhB;;AACAC,kBAAAA,YAAY;AACVC,oBAAAA,MAAM,EAAE,MADE;AAEVP,oBAAAA,IAAI,EAAJA;AAFU,qBAGPR,OAHO,CAAZ;AAKD,iBAbD,MAaO;AACL;AACA;AACA;AACAc,kBAAAA,YAAY;AACVC,oBAAAA,MAAM,EAAE,MADE;AAEVd,oBAAAA,OAAO;AAAI,sCAAgB;AAApB,uBAA2CA,OAA3C,CAFG;AAGVO,oBAAAA,IAAI,EAAEJ;AAHI,qBAIPF,MAJO,CAAZ;AAMD;;AAhDH;AAAA;AAAA,uBAmD2Bc,KAAK,CAAC,KAAKpB,GAAN,EAAWkB,YAAX,CAnDhC;;AAAA;AAmDUG,gBAAAA,QAnDV;AAAA;AAAA,uBAoDyBA,QAAQ,CAACC,IAAT,EApDzB;;AAAA;AAoDUC,gBAAAA,MApDV;;AAAA,qBAsDQA,MAAM,CAACC,MAtDf;AAAA;AAAA;AAAA;;AAAA,sBAwDYD,MAxDZ;;AAAA;AAAA,iDA2DWA,MA3DX;;AAAA;AAAA;AAAA;AAAA,sBA+DUE,MAAM;AACVC,kBAAAA,MAAM,EAAE,KAAKzB,YAAL;AADE,gCA/DhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;SANmBF,S","sourcesContent":["import { print } from \"graphql/language/printer\";\r\nimport extractFiles from \"./extract-files\";\r\n\r\nexport default class GqlClient {\r\n  constructor({ url, errorHandler }) {\r\n    this.url = url;\r\n    this.errorHandler = errorHandler;\r\n  }\r\n\r\n  async query(query, variables, options = {}) {\r\n    const { headers, ...others } = options;\r\n    // Extracts all files from variables and replaces them\r\n    // with null\r\n    const files = extractFiles(variables);\r\n    let fetchOptions;\r\n\r\n    // uncomment below to debug query\r\n\r\n    // Creates a stringfied query\r\n    const graphqlQuery = JSON.stringify({\r\n      query: print(query), // \"print\" changes graphql AST into normal string\r\n      variables\r\n    });\r\n\r\n    // Uncomment to the debugðŸ‘‡\r\n\r\n    // (headers, JSON.stringify(variables, null, 2))\r\n    // console.log(\r\n    //   print(query),\r\n    //   JSON.stringify(variables)\r\n    // )\r\n\r\n    // Checks if there are any files in the query\r\n    // if there is then ...\r\n    if (files.length) {\r\n      // ...then creates a form object\r\n      const body = new FormData();\r\n      // appends query into body\r\n      body.append(\"operations\", graphqlQuery);\r\n      // apppend files into body\r\n      files.forEach(({ path, file }) => body.append(path, file));\r\n      // sets fetchOptions\r\n      fetchOptions = {\r\n        method: \"POST\",\r\n        body,\r\n        ...options\r\n      };\r\n    } else {\r\n      // sets fetchOption without any body append\r\n      // because there are no files here and we\r\n      // directly assign body to graphqlQuery\r\n      fetchOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\", ...headers },\r\n        body: graphqlQuery,\r\n        ...others\r\n      };\r\n    }\r\n    try {\r\n      // fetches the Data\r\n      const response = await fetch(this.url, fetchOptions);\r\n      const result = await response.json();\r\n      // Checks if there are any error in result\r\n      if (result.errors) {\r\n        // throw the result\r\n        throw result;\r\n      }\r\n      // otherwise just normally return them\r\n      return result;\r\n    } catch (e) {\r\n      // For other normal errors\r\n      // just throw them\r\n      throw Object({\r\n        status: this.errorHandler(e),\r\n        ...e\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}