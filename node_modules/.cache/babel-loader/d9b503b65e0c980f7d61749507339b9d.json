{"ast":null,"code":"var isObject = function isObject(value) {\n  return typeof value === \"object\" && value !== null;\n};\n\nvar extractFiles = function extractFiles(tree) {\n  var treePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var files = [];\n\n  var recurse = function recurse(node, nodePath) {\n    Object.keys(node).forEach(function (key) {\n      if (!isObject(node[key])) return;\n      var path = \"\".concat(nodePath).concat(key);\n\n      if (typeof File !== \"undefined\" && node[key] instanceof File || typeof Blob !== \"undefined\" && node[key] instanceof Blob) {\n        files.push({\n          path: path,\n          file: node[key]\n        });\n        node[key] = null; // eslint-disable-line no-param-reassign\n\n        return;\n      }\n\n      if (typeof FileList !== \"undefined\" && node[key] instanceof FileList) {\n        node[key] = Array.prototype.slice.call(node[key]); // eslint-disable-line no-param-reassign\n      }\n\n      recurse(node[key], \"\".concat(path, \".\"));\n    });\n  };\n\n  if (isObject(tree)) {\n    recurse(tree, treePath === \"\" ? treePath : \"\".concat(treePath, \".\"));\n  }\n\n  return files;\n};\n\nexport default extractFiles;","map":{"version":3,"sources":["C:/Users/super/.vscode/tekie/src/utils/extract-files.js"],"names":["isObject","value","extractFiles","tree","treePath","files","recurse","node","nodePath","Object","keys","forEach","key","path","File","Blob","push","file","FileList","Array","prototype","slice","call"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C;AAAA,CAAtB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAyB;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AAC5C,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAClCC,IAAAA,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC/B,UAAI,CAACZ,QAAQ,CAACO,IAAI,CAACK,GAAD,CAAL,CAAb,EAA0B;AAC1B,UAAMC,IAAI,aAAML,QAAN,SAAiBI,GAAjB,CAAV;;AACA,UACG,OAAOE,IAAP,KAAgB,WAAhB,IAA+BP,IAAI,CAACK,GAAD,CAAJ,YAAqBE,IAArD,IACC,OAAOC,IAAP,KAAgB,WAAhB,IAA+BR,IAAI,CAACK,GAAD,CAAJ,YAAqBG,IAFvD,EAGE;AACAV,QAAAA,KAAK,CAACW,IAAN,CAAW;AAAEH,UAAAA,IAAI,EAAJA,IAAF;AAAQI,UAAAA,IAAI,EAAEV,IAAI,CAACK,GAAD;AAAlB,SAAX;AACAL,QAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,IAAZ,CAFA,CAEkB;;AAClB;AACD;;AAED,UAAI,OAAOM,QAAP,KAAoB,WAApB,IAAmCX,IAAI,CAACK,GAAD,CAAJ,YAAqBM,QAA5D,EAAsE;AACpEX,QAAAA,IAAI,CAACK,GAAD,CAAJ,GAAYO,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bf,IAAI,CAACK,GAAD,CAA/B,CAAZ,CADoE,CACjB;AACpD;;AACDN,MAAAA,OAAO,CAACC,IAAI,CAACK,GAAD,CAAL,YAAeC,IAAf,OAAP;AACD,KAhBD;AAiBD,GAlBD;;AAoBA,MAAIb,QAAQ,CAACG,IAAD,CAAZ,EAAoB;AAClBG,IAAAA,OAAO,CAACH,IAAD,EAAOC,QAAQ,KAAK,EAAb,GAAkBA,QAAlB,aAAgCA,QAAhC,MAAP,CAAP;AACD;;AACD,SAAOC,KAAP;AACD,CA3BD;;AA6BA,eAAeH,YAAf","sourcesContent":["const isObject = value => typeof value === \"object\" && value !== null;\r\n\r\nconst extractFiles = (tree, treePath = \"\") => {\r\n  const files = [];\r\n\r\n  const recurse = (node, nodePath) => {\r\n    Object.keys(node).forEach(key => {\r\n      if (!isObject(node[key])) return;\r\n      const path = `${nodePath}${key}`;\r\n      if (\r\n        (typeof File !== \"undefined\" && node[key] instanceof File) ||\r\n        (typeof Blob !== \"undefined\" && node[key] instanceof Blob)\r\n      ) {\r\n        files.push({ path, file: node[key] });\r\n        node[key] = null; // eslint-disable-line no-param-reassign\r\n        return;\r\n      }\r\n\r\n      if (typeof FileList !== \"undefined\" && node[key] instanceof FileList) {\r\n        node[key] = Array.prototype.slice.call(node[key]); // eslint-disable-line no-param-reassign\r\n      }\r\n      recurse(node[key], `${path}.`);\r\n    });\r\n  };\r\n\r\n  if (isObject(tree)) {\r\n    recurse(tree, treePath === \"\" ? treePath : `${treePath}.`);\r\n  }\r\n  return files;\r\n};\r\n\r\nexport default extractFiles;\r\n"]},"metadata":{},"sourceType":"module"}