"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var schema = "\ntype Track {\n  id: String\n  album(full: Int): Album\n  artists(full: Int, throttle: Int): [Artist]\n  available_markets: [String]\n  audio_features: AudioFeatures\n  disc_number: Int\n  duration_ms: Int\n  explicit: Boolean\n  href: String\n  is_playable: Boolean\n  name: String\n  popularity: Int\n  preview_url: String\n  track_number: Int\n  type: String\n  uri: String\n}\n\ntype Artist {\n  id: String\n  genres: [String]\n  href: String\n  name: String\n  popularity: Int\n  type: String\n  uri: String\n  images: [Image]\n  top_tracks(country: String): [Track]\n  albums(album_type: String, throttle: Int, continueOnError: Int, limit: Int): [Album]\n  related_artists(throttle: Int, continueOnError: Int, limit: Int): [Artist]\n}\n\ntype SimplifiedArtist {\n  id: String\n  href: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype Album {\n  id: String\n  album_type: String\n  artists: [Artist]\n  available_markets: [String]\n  genres: [String]\n  href: String\n  label: String\n  name: String\n  popularity: Int\n  release_date: String\n  release_date_precision: String\n  type: String\n  uri: String\n  images: [Image]\n  tracks(throttle: Int, continueOnError: Int, limit: Int): [Track]\n}\n\ntype SimplifiedAlbum {\n  id: String\n  album_type: String\n  artists: [Artist]\n  available_markets: [String]\n  href: String\n  label: String\n  name: String\n  type: String\n  uri: String\n}\n\ntype PrivateUser {\n  id: String\n  birthday: String\n  country: String\n  display_name: String\n  email: String\n  href: String\n  product: String\n  uri: String\n  tracks(throttle: Int, continueOnError: Int, limit: Int): [SavedTrack]\n  playlists(throttle: Int, continueOnError: Int, limit: Int): [Playlist]\n  albums: [SavedAlbum]\n  top_artists(throttle: Int, continueOnError: Int, limit: Int): [Artist]\n  top_tracks(throttle: Int, continueOnError: Int, limit: Int): [Track]\n  images: [Image]\n  artists(throttle: Int, continueOnError: Int, limit: Int): [Artist]\n  devices: [Device]\n  player: Player\n}\n\ntype SavedTrack {\n  added_at: String\n  track: Track\n}\n\ntype SavedAlbum {\n  added_at: String\n  album: Album\n}\n\ntype PlaylistTrack {\n  added_at: String\n  track: Track\n  added_by: PublicUser\n  is_local: Boolean\n}\n\ntype PublicUser {\n  id: String\n  display_name: String\n  href: String\n  uri: String\n  playlists: [Playlist]\n  images: [Image]\n}\n\ntype Playlist {\n  id: String\n  description: String\n  href: String\n  name: String\n  owner: PublicUser\n  uri: String\n  tracks(throttle: Int, continueOnError: Int, limit: Int): [PlaylistTrack]\n  public: Boolean\n  images: [Image]\n}\n\ntype AudioFeatures {\n  id: String\n  acousticness: String\n  analysis_url: String\n  danceability: String\n  duration_ms: String\n  energy: String\n  instrumentalness: String\n  key: String\n  liveness: String\n  loudness: String\n  mode: String\n  speechiness: String\n  tempo: String\n  time_signature: String\n  track_href: String\n  valence: String\n}\n\ntype Image {\n  height: Int\n  url: String\n  width: Int\n}\n\ntype Device {\n  id: String\n  is_active: Boolean\n  is_restricted: Boolean\n  name: String\n  type: String\n  volume_percent: Int\n}\n\ntype PlayerContext {\n  href: String\n  type: String\n  uri: String\n}\n\ntype Player {\n  timestamp: String\n  device: Device\n  progress_ms: String\n  is_playing: Boolean\n  shuffle_state: Boolean\n  repeat_state: String\n  item: Track\n  context: PlayerContext\n}\n\n# the schema allows the following query:\ntype Query {\n  me: PrivateUser\n  user(id: String!): PublicUser\n  track(id: String, name: String): Track\n  tracks(ids: String!): [Track]\n  audio_features(trackIds: String!): [AudioFeatures]\n  audio_feature(trackId: String!): AudioFeatures\n  artist(id: String, name: String): Artist\n  artists(ids: String!): [Artist]\n  album(id: String!): Album\n  albums(ids: String!): [Album]\n  playlist(id: String!, userId: String!): Playlist\n}\n\n# we need to tell the server which types represent the root query\n# and root mutation types. We call them RootQuery and RootMutation by convention.\nschema {\n  query: Query\n}\n";
exports.default = schema;
